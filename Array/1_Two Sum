class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] res = new int[2];
        Map<Integer,Integer> map = new HashMap<>();
        for(int i=0; i<nums.length; i++){
            int x = target - nums[i];
            if(map.containsKey(x)){
                  res[0] = i;
                  res[1] = map.get(x);
            }
            map.put(nums[i],i);
        }
        return res;
    }
}

class Solution {
    public int[] twoSum(int[] nums, int target) {
    	if(nums.length == 0) return null;
        int[] res = new int[2];
        res[0] = -1;
        res[1] = -1;
        int max = Integer.MIN_VALUE;
        Map<Integer,Integer> map = new HashMap<>();
        for(int i=0; i<nums.length; i++){
            int x = target - nums[i]-30;
            if(map.containsKey(x)){
               if(nums[i] > max || x > max) {
                  res[0] = i;
                  res[1] = map.get(x);
                  max = Math.max(x, nums[i]);
               }
            }
            map.put(nums[i],i);
        }
        
        if(res[0] == -1 && res[1] == -1) return null;
        
        return res;
    }
}
